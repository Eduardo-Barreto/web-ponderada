# Define upstream servers to load balance/proxy requests

# Upstream for the backend GoLang service
upstream backend_service {
    # Service name defined in docker-compose.yml and internal port
    server backend:8080;
}

server {
    listen 80;
    server_name localhost; # Replace with your domain name in production

    # Optional: Redirect HTTP to HTTPS (uncomment if using SSL)
    # listen 443 ssl;
    # server_name yourdomain.com;
    # ssl_certificate /etc/nginx/certs/yourdomain.com.crt;
    # ssl_certificate_key /etc/nginx/certs/yourdomain.com.key;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;

    # if ($scheme = http) {
    #     return 301 https://$server_name$request_uri;
    # }

    # Increase max body size for file uploads (adjust as needed)
    client_max_body_size 20M;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Frontend
    location / {
        proxy_pass http://frontend:80;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Backend API
    location /api/v1/ {
        proxy_pass http://backend:8000/api/v1/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Handle static files and images
    location /uploads/ {
        proxy_pass http://backend:8000/uploads/;
    }

    # Serve uploaded images via backend API for controlled access
    # Requests like /uploads/image.jpg will NOT be served directly by Nginx
    # The backend API should have an endpoint like /api/v1/images/{filename}
    # If you choose to serve directly from Nginx (less secure, simpler):
    # location /uploads/ {
    #    alias /path/to/mounted/volume/inside/nginx/container; # Requires mounting uploads_data to Nginx too
    #    expires 1d; # Cache control
    #    add_header Cache-Control "public";
    # }

    # Optional: Add security headers
    # add_header X-Frame-Options "SAMEORIGIN" always;
    # add_header X-XSS-Protection "1; mode=block" always;
    # add_header X-Content-Type-Options "nosniff" always;
    # add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' ws: wss:;" always;
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # Use only with HTTPS
}
